# -*- coding: utf-8 -*-
"""Decision Tree.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ICUcDzC9D8SkYvoeikyJPUR3UOr8AJxO
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error
import matplotlib.pyplot as plt

# Load data into df
df = pd.read_csv('/content/processed_ev_data.csv')

# ====== Prepare Features & Target ======
target_col   = 'Electric Range (km)'
feature_cols = [c for c in df.columns if c != target_col][:5]

# Ensure numeric & drop NaNs
df[feature_cols] = df[feature_cols].apply(pd.to_numeric, errors='coerce')
df = df.dropna(subset=feature_cols + [target_col])

# Final X, y arrays
X = df[feature_cols].values
y = df[target_col].values

# Split into train/test
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Initialize and train Decision Tree regressor
dt_model = DecisionTreeRegressor(random_state=42)
dt_model.fit(X_train, y_train)

# Predict and evaluate
y_pred = dt_model.predict(X_test)

r2   = r2_score(y_test, y_pred)
mae  = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))

print("\nResults:")
print(f"RÂ² Score: {r2:.4f}")
print(f"MAE:       {mae:.4f}")
print(f"RMSE:      {rmse:.4f}")

# --- Simple Plots ---

# 1) Actual vs Predicted
plt.figure()
plt.scatter(y_test, y_pred, alpha=0.7)
plt.plot([y_test.min(), y_test.max()],
         [y_test.min(), y_test.max()],
         'k--', lw=1)
plt.xlabel("Actual Electric Range (km)")
plt.ylabel("Predicted Electric Range (km)")
plt.title("Actual vs Predicted (Decision Tree)")
plt.tight_layout()
plt.show()